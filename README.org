#+title: Emacs configuration
#+author: KiwiBoaye
#+options: num:nil date:nil
* Emacs Configuration
  This is a configuration file that includes all of my personal changes and improvements on the emacs 26
  Everything that I wrote here is ment to be in the =.emacs= or =init.el= file. Enjoy and feel free to add on new content.

* Features that I added on with time

** Header
  - Visual bell
  - Inhibit the startup message
  - Blinking cursor
  - Parenthesis pairing
  - Removed the scroll bar
  - Removed the tool bar

  #+BEGIN_SRC emacs-lisp

    (blink-cursor-mode 1)    ;; Set blinking
    (set-fringe-mode 10)     ;; Give breathing room
    (tool-bar-mode -1)       ;; Disable the toolbar
    (scroll-bar-mode -1)     ;; Disable the scrollbar
    (electric-pair-mode 1)   ;; Electric pair parenthesis
    (column-number-mode 1)   ;; Add column number
    (show-paren-mode 1)      ;; Show global parenthesis on all buffers
    (global-hl-line-mode 1)  ;; Set highlight line
    (setq inhibit-startup-message t)

    ;; Set visible notification bell
    (setq visible-bell 'top-bottom)
    (setq bell-volume 0)

  #+END_SRC

** Tabs like spaces
   My regular width is 4.

   #+BEGIN_SRC emacs-lisp

     (setq tab-width 4)
     (setq-default indent-tabs-mode nil)

   #+END_SRC

** Relative line numbers
   I prefer relative numbers instead of static ones.
   That way I can jump through the files with ease.


   #+BEGIN_SRC emacs-lisp

     (defvar display-line-numbers-type)
     (setq display-line-numbers-type 'relative)
     (global-display-line-numbers-mode t)

   #+END_SRC
   

*** Hooks
    I added hooks for the all the terminal modes

   #+BEGIN_SRC emacs-lisp

     (add-hook 'shell-mode-hook (lambda () (display-line-numbers-mode 0)))
     (add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode 0)))
     (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode 0)))
     (add-hook 'treemacs-mode-hook (lambda () (display-line-numbers-mode 0)))
     (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode 0)))

   #+END_SRC

** The package archives
   I use only elpa and melpa packages

   #+BEGIN_SRC emacs-lisp

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/")
                  '("melpa-stable" . "https://stable.melpa.org/packages/"))
     ;; Check package sources like so and refresh
     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

   #+END_SRC

*** Added use-package as well and turned it on by default
    use-package is a better archive management macro.
    [[https://github.com/jwiegley/use-package][Check its github page for more info]].
    

    #+BEGIN_SRC emacs-lisp

      ;; Initialize use-package on all platforms
      (unless (package-installed-p 'use-package)
              (package-install 'use-package))
      (require 'use-package)
      (setq use-package-always-ensure t)

    #+END_SRC

** Custom variables
   I wanted to make a cleaner .emacs file so I changed where the
   custom variables are being saved. That way I can see better
   what is going in it.


    #+BEGIN_SRC emacs-lisp

      ;; NOTE: the .custom.el file should be created in .emacs.d/custom/ directory or
      ;; the equivalent directory of your emacs distribution or just create a directory yourself
      (setq custom-file
            (expand-file-name "~/.emacs.d/custom/custom.el" user-emacs-directory))
      (load custom-file)

    #+END_SRC

** Markdown
   This is my markdown setup

   #+BEGIN_SRC emacs-lisp
     ;; markdown
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC

** Org-Mode
   I made an org-file that contains everything connected to my 
   org-mode configuration, similarly to what I've done with the
   custom file mentioned above
I changed my mind over time and started configuring
org-mode with this setup

   #+BEGIN_SRC emacs-lisp

     (setq custom-file
           (expand-file-name "~/.emacs.d/custom/custom.el" user-emacs-directory))
     (load custom-file)

   #+END_SRC
   
   Check this guy's github page for more info [[https://github.com/sabof/org-bullets][here]]

** Essential features
   Here is a list of some small but essential features I added for a better experience 
   using emacs.
*** View by half page
    
    #+BEGIN_SRC emacs-lisp

      (use-package view
        :bind
        ("C-v" . View-scroll-half-page-forward)
        ("M-v" . View-scroll-half-page-backward))

    #+END_SRC

*** Doom emacs mode line

    #+BEGIN_SRC emacs-lisp

      (use-package doom-modeline
        :ensure t
        :init   (doom-modeline-mode 1)
        :custom ((doom-modeline-mode-height 12)))

    #+END_SRC

    In order to work properly just run the following command
    or refer to the original repos here [[https://github.com/seagle0128/doom-modeline][doom-modeline's page]] / [[https://github.com/domtronn/all-the-icons.el#installation][all-the-icons installation]].

    #+BEGIN_SRC 
    M-x all-the-icons-install-fonts
    #+END_SRC

*** Ivy completion and ivy-rich
    This installs counsel and swiper as well.
    For futher info check [[https://github.com/abo-abo/swiper][Swiper's github page.]]

    #+BEGIN_SRC emacs-lisp

      (use-package ivy
              :diminish
              :bind
                   ("M-x" . 'counsel-M-x)
                   ("C-s" . 'swiper)
                   ("C-x C-f" . 'counsel-find-file)
              :config
              (ivy-mode 1))

      (use-package ivy-rich
        :init
        (ivy-rich-mode 1))

    #+END_SRC

*** Which key 
    Explain what every key binding does in a simple way

    #+BEGIN_SRC emacs-lisp 
 
      (use-package which-key
        :init (which-key-mode)
        :diminish which-key-mode
        :config
        (setq which-key-idle-delay 0.6)) ;; This is what I've chosen as a delay

    #+END_SRC

** Theme
   I use the dracula theme and here's how that looks in my .emacs file.
   You can get the dracula theme from [[https://draculatheme.com/emacs/][dracula theme for emacs]].
   #+BEGIN_SRC emacs-lisp

     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'dracula t)
     (setq dracula-use-24-bit-colors-on-256-colors-terms t)
     (unless (display-graphic-p)
       (set-face-background 'default "black" nil))

   #+END_SRC

   I am also developing my own theme called the Antim theme. It's
   what I currently am mostly working on
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'antim t)
   #+END_SRC

** LSP-Mode
   An important feature for completion and code refactoring

*** Flycheck
    Check on the fly work for the 

*** TypeScript
    I added a typescript lsp-server which gives me constant help when I am coding in =.ts=

    #+BEGIN_SRC emacs-lisp

      (use-package lsp-mode
        :commands (lsp lsp-deferred)
        :init
        (setq lsp-keymap-prefix "C-c l")
        :config
        (lsp-enable-which-key-integration t))

      (use-package typescript-mode
        :mode "\\.ts\\'"
        :hook (typescript-mode . lsp-deferred)
        :config
        (setq typescript-indent-level 2))

    #+END_SRC

*** Go
    lsp-server for golang for the =.go= files
    #+BEGIN_SRC emacs-lisp
      ;; Golang mode
      (use-package go-mode
        :config
        (progn
          (setq gofmt-command "goimports")
          (add-hook 'before-save-hook 'gofmt-before-save)))
    #+END_SRC

*** Java
    lsp-java with a rather standard config
    checkout more here at lsp-java's official [[https://github.com/emacs-lsp/lsp-java][github repository]]
    #+BEGIN_SRC emacs-lisp
      ;; LSP-JAVA quickstart
      (use-package lsp-java
        :ensure t
        :after lsp-mode
        :config (add-hook 'java-mode-hook 'lsp))

      (setq lsp-enable-links nil)
    #+END_SRC

*** Dart

    #+BEGIN_SRC emacs-lisp
      ;; LSP dart-mode
      (use-package lsp-dart
	:ensure t
	:hook (dart-mode . lsp-mode))

      ;; Optional Flutter packages
      (use-package hover
	:ensure t) ;; run app from desktop without emulator
    #+END_SRC

** Dired
   A better interface and keybindings for dired
   #+BEGIN_SRC emacs-lisp
     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :custom ((dired-listing-switches "-agho --group-directories-first"))
       :config
       (define-key dired-mode-map (kbd "f") 'dired-single-buffer)
       (define-key dired-mode-map (kbd "b") 'dired-single-up-directory))

     (use-package dired-single)

     (use-package all-the-icons-dired
       :hook (dired-mode . all-the-icons-dired-mode))
   #+END_SRC
** CIDER
   This is the Clojure Interactive Development Environment
   and more information can be found here [[https://github.com/clojure-emacs/cider][cider on github]] and here [[https://cider.mx/][cider's website]]

   #+BEGIN_SRC emacs-lisp
     ;; clojure config
     (use-package cider
       :ensure t)
   #+END_SRC

** PDF-view
   Added a pdf-tools section to read PDFs in emacs.
   For additional information check [[https://github.com/politza/pdf-tools][pdf-tools' page]]
   
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :pin manual
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-width)
       (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
       :custom
       (pdf-annot-activate-created-annotations t "automatically annotate highlights"))
   #+END_SRC
** Emojify emacs
   Added this package to see emojis
   in Emacs

   #+BEGIN_SRC emacs-lisp

     (use-package emojify
       :hook (after-init . global-emojify-mode))

   #+END_SRC
** Projectile
   Projectile is a project interaction library for Emacs.
   Its goal is to provide a nice set of features operating on a project level
   without introducing external dependencies (when feasible).

   More information can be found [[https://github.com/bbatsov/projectile][here]]

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/Github") ;; use a project directory
         (setq projectile-project-search-path '("~/Github")))
       (setq projectile-switch-project-action #'projectile-dired))
   #+END_SRC
