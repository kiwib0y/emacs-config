#+title: Emacs configuration
#+author: KiwiB0y
#+options: num:nil date:nil toc:2

* Intro
This is a configuration file that includes all of my personal changes and improvements on the Emacs 27.2
(I personally use the GNU Guix package-manager for Emacs, but it should work with versions from other package managers)

Everything that I wrote here is ment to be in the =.emacs= or =init.el= file.
Enjoy and feel free to add on new content.

* Installation
To use my configuration clone the repository and put the =init.el= in your =~/.emacs.d/= folder.

* Features

** Header
This is an updated version of my emacs header.

#+begin_src emacs-lisp

  (blink-cursor-mode -1)          ;; Disable cursor blink
  (set-fringe-mode 8)             ;; Set the optimal fringe
  (tool-bar-mode -1)              ;; Disable the toolbar
  (scroll-bar-mode -1)            ;; Disable the scrollbar
  (electric-pair-mode 1)          ;; Electric pair parenthesis
  (column-number-mode 1)          ;; Add column number
  (show-paren-mode 1)             ;; Show global parenthesis on all buffers
  (global-hl-line-mode 1)         ;; Highlight current line
  (delete-selection-mode 1)       ;; Better paste over region behavior

#+end_src

** Font configuration
I recently started using the Hack font size 11.

#+begin_src emacs-lisp

  ;; fonts configuration
  (defvar kiwib0y/font-sizes 110)

  (defun kiwib0y/font-face ()
    (set-face-attribute 'default nil
                        :font "Hack" :height kiwib0y/font-sizes)
    (set-face-attribute 'fixed-pitch nil
                        :font "Hack" :height kiwib0y/font-sizes))

  ;; daemon frame setup
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (kiwib0y/font-face))))
    (kiwib0y/font-face))

#+end_src

** Tabs
I set tab width to 2.

#+begin_src emacs-lisp

  ;; set tabs to be 2 spaces
  (setq tab-width 2)
  (setq-default indent-tabs-mode t)
  (setq tab-always-indent 'complete)

#+end_src

** Relative line numbers
I prefer relative numbers instead of static ones.
That way I can jump between lines easier.

#+begin_src emacs-lisp

     (defvar display-line-numbers-type)
     (setq display-line-numbers-type 'relative)
     (global-display-line-numbers-mode t)

#+end_src
   
** Hooks
    I don't like seeing rows in these modes.

#+begin_src emacs-lisp

     (dolist (mode '(shell-mode-hook
                     eshell-mode-hook
                     term-mode-hook
                     treemacs-mode-hook
                     org-mode-hook
                     pdf-view-mode-hook
                     image-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** The package archives
   I use only elpa and melpa packages

#+begin_src emacs-lisp

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/")
                  '("melpa-stable" . "https://stable.melpa.org/packages/"))
     ;; Check package sources like so and refresh
     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

#+end_src

*** Added use-package as well and turned it on by default
    use-package is a better archive management macro.
    [[https://github.com/jwiegley/use-package][Check its github page for more info]].
    

#+begin_src emacs-lisp

      ;; Initialize use-package on all platforms
      (unless (package-installed-p 'use-package)
              (package-install 'use-package))
      (require 'use-package)
      (setq use-package-always-ensure t)

#+end_src

** Custom variables
   I wanted to make a cleaner .emacs file so I changed where the
   custom variables are being saved. That way I can see better
   what is going in it.


#+begin_src emacs-lisp

      ;; NOTE: the .custom.el file should be created in .emacs.d/custom/ directory or
      ;; the equivalent directory of your emacs distribution or just create a directory yourself
      (setq custom-file
            (expand-file-name "~/.emacs.d/custom/custom.el" user-emacs-directory))
      (load custom-file)

#+end_src

** Markdown
   This is my markdown setup

   #+BEGIN_SRC emacs-lisp
     ;; markdown
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC

** Org-Mode
I changed my mind over time and started configuring
org-mode with this setup

#+begin_src emacs-lisp

  (defun kiwib0y/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :defer t
    :hook (org-mode . kiwib0y/org-mode-setup)
    :config
    (setq org-ellipsis "↴")
    (setq org-hide-emphasis-markers t)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (C . t)
       (java . t)
       (python . t)
       (ruby . t))))

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq latex-run-command "pdflatex")

  (require 'org-tempo)

  (use-package org-tree-slide
    :custom
    (org-image-actual-width nil))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●" "○")))

  (with-eval-after-load 'org-faces
    (set-face-attribute 'org-document-title nil :weight 'bold :height 1.32)
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :weight 'regular :height (cdr face))))



#+end_src

This is how I format org-mode through setting the
column width and I set the text to be in the center.

Check this guy's [[https://github.com/sabof/org-bullets][github page]] for more information.

#+begin_src emacs-lisp

  (defun kiwib0y/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . kiwib0y/org-mode-visual-fill))

#+end_src

I put my org-agenda files in a separate folder

#+begin_src emacs-lisp
  ;; org-mode agenda setup
  (setq org-agenda-files
        '("~/.emacs.d/OrgFiles/Tasks.org"))

  (add-to-list 'load-path
               org-agenda-files)

#+end_src
   
Check this guy's github page for more info [[https://github.com/sabof/org-bullets][here]]

** Essential features
Here is a list of some small but essential features I added for a better experience 
using emacs.
*** View by half page
    
#+begin_src emacs-lisp

      (use-package view
        :bind
        ("C-v" . View-scroll-half-page-forward)
        ("M-v" . View-scroll-half-page-backward))

#+end_src

*** Doom emacs mode line


      (use-package doom-modeline
        :ensure t
        :init   (doom-modeline-mode 1)
        :custom ((doom-modeline-mode-height 12)))

#+end_src

In order to work properly just run the following command
or refer to the original repos here [[https://github.com/seagle0128/doom-modeline][doom-modeline's page]] / [[https://github.com/domtronn/all-the-icons.el#installation][all-the-icons installation]].

#+begin_src 
    M-x all-the-icons-install-fonts

*** Ivy completion and ivy-rich
This installs counsel and swiper as well.
For futher info check [[https://github.com/abo-abo/swiper][Swiper's github page.]]

#+begin_src emacs-lisp

      (use-package ivy
              :diminish
              :bind
                   ("M-x" . 'counsel-M-x)
                   ("C-s" . 'swiper)
                   ("C-x C-f" . 'counsel-find-file)
              :config
              (ivy-mode 1))

      (use-package ivy-rich
        :init
        (ivy-rich-mode 1))

#+end_src

*** Which key 
Explain what every key binding does in a simple way

#+begin_src emacs-lisp 

    #+BEGIN_SRC emacs-lisp 
 
      (use-package which-key
        :init (which-key-mode)
        :diminish which-key-mode
        :config
        (setq which-key-idle-delay 0.6)) ;; This is what I've chosen as a delay

#+end_src

** Theme
I use the dracula theme and here's how that looks in my .emacs file.
You can get the dracula theme from [[https://draculatheme.com/emacs/][dracula theme for emacs]].
#+begin_src emacs-lisp

     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'dracula t)
     (setq dracula-use-24-bit-colors-on-256-colors-terms t)
     (unless (display-graphic-p)
       (set-face-background 'default "black" nil))

#+end_src

   I am also developing my own theme called the Antim theme. It's
   what I currently am mostly working on
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'antim t)
   #+END_SRC
I am also developing my own theme called the Antim theme. It's
what I currently am mostly working on

** LSP-Mode
An important feature for completion and code refactoring

*** TypeScript
    I added a typescript lsp-server which gives me constant help when I am coding in =.ts=

#+begin_src emacs-lisp

      (use-package lsp-mode
        :commands (lsp lsp-deferred)
        :init
        (setq lsp-keymap-prefix "C-c l")
        :config
        (lsp-enable-which-key-integration t))

      (use-package typescript-mode
        :mode "\\.ts\\'"
        :hook (typescript-mode . lsp-deferred)
        :config
        (setq typescript-indent-level 2))

#+end_src

** Dired
   A better interface and keybindings for dired
   #+BEGIN_SRC emacs-lisp
     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :custom ((dired-listing-switches "-agho --group-directories-first"))
       :config
       (define-key dired-mode-map (kbd "f") 'dired-single-buffer)
       (define-key dired-mode-map (kbd "b") 'dired-single-up-directory))

     (use-package dired-single)

     (use-package all-the-icons-dired
       :hook (dired-mode . all-the-icons-dired-mode))
   #+END_SRC
A better interface and keybindings for dired
** CIDER
This is the Clojure Interactive Development Environment
and more information can be found here [[https://github.com/clojure-emacs/cider][cider on github]] and here [[https://cider.mx/][cider's website]]

   #+BEGIN_SRC emacs-lisp
     ;; clojure config
     (use-package cider
       :ensure t)
   #+END_SRC

** PDF-view
Added a pdf-tools section to read PDFs in emacs.
For additional information check [[https://github.com/politza/pdf-tools][pdf-tools' page]]
   
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :pin manual
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-width)
       (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
       :custom
       (pdf-annot-activate-created-annotations t "automatically annotate highlights"))
   #+END_SRC
** Emojify emacs
Added this package to see emojis
in Emacs

#+begin_src emacs-lisp

     (use-package emojify
       :hook (after-init . global-emojify-mode))

#+end_src
** Projectile
   Projectile is a project interaction library for Emacs.
   Its goal is to provide a nice set of features operating on a project level
   without introducing external dependencies (when feasible).

   More information can be found [[https://github.com/bbatsov/projectile][here]]

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/Github") ;; use a project directory
         (setq projectile-project-search-path '("~/Github")))
       (setq projectile-switch-project-action #'projectile-dired))
   #+END_SRC
Projectile is a project interaction library for Emacs.
Its goal is to provide a nice set of features operating on a project level
without introducing external dependencies (when feasible).

More information can be found [[https://github.com/bbatsov/projectile][here]]

